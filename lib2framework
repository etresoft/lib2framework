#!/usr/bin/perl

use strict;

use Cwd;
use File::Spec;
use File::Basename;
use File::Copy;
use File::Spec;
use Getopt::Long qw(:config bundling pass_through);

# Print usage message if there aren't enough arguments to run.
die usage()
  if @ARGV < 4;

# Get the framework name to build.
my $framework = shift;

# Get the org.project.whatever ID.
my $id = shift;

# Get the version.
my $version = shift;

# Get the source archive to build.
my $source = shift;

# Get optional arguments.
my $prefix;
my $sdk;
my $deployment;
my $lib;
my $target;
my $arch;
my $debug;

GetOptions
  (
  'prefix=s' => \$prefix,
  'sdk=s' => \$sdk,
  'deploy=s' => \$deployment,
  'lib=s' => \$lib,
  'target=s' => \$target,
  'arch=s' => \$arch,
  'debug' => \$debug
  );
  
my $dir;

if(!-e $source)
  {
  printf("Source archive/directory '$source' not found\n");
  die usage();
  }
  
my $archive = basename($source);

my $tmpdir = File::Spec->join('/tmp', $archive);

# If the archive is a directory, copy it to /tmp to work on it.
if(-d $source)
  {
  $dir = $tmpdir;
  
  runsystem(qq{/bin/rm -Rf "$dir"});
  runsystem(qq{/bin/cp -R "$source" "$dir"});
  }
else
  {
  runsystem(qq{/bin/rm -Rf "$tmpdir"});
  runsystem(qq{/bin/mkdir -p "$tmpdir"});

  if($archive =~ /\.tgz|\.tar\.gz$/)
    {
    runsystem(qq{/usr/bin/tar zxf "$source" "-C$tmpdir"});
    } 
  elsif($archive =~ /\.tbz|\.tar\.bz2$/)
    {
    runsystem(qq{/usr/bin/tar jxf "$source" "-C/tmp/$archive"});
    }
  elsif($archive =~ /\.zip$/)
    {
    runsystem(qq{/usr/bin/unzip "$source" -d "/tmp/$archive"});
    }

  $dir = `/usr/bin/find $tmpdir -mindepth 1 -maxdepth 1`;
  
  chomp $dir;
  }
  
# Set a default framework install path.
my $defaultPrefix = File::Spec->join($ENV{HOME}, 'Library');

# Default to ~/Library/Frameworks
$prefix = $defaultPrefix
  if not $prefix;

# Set a default SDK.
$sdk = 'macosx'
  if not $sdk;

# Set a default deployment.  
if(not $deployment)
  {
  $deployment = `xcrun --sdk $sdk --show-sdk-version`;

  chomp $deployment;
  }
  
# Setup the SDKROOT. Hopefully this will handle most situations.
$ENV{SDKROOT} = `/usr/bin/xcrun --sdk $sdk --show-sdk-path`;
  
chomp $ENV{SDKROOT};

# Get any other options.
my @args = @ARGV;

# Setup some command line arguments in case I need them.
my @arch;
my $minversion = '';

# Configure for iPhone.
if($sdk =~ /^iphoneos/i)
  {
  @arch = 
    $arch
      ? split(/\s+/, $arch)
      : qw(armv7 armv7s arm64);

  $minversion = sprintf('-miphoneos-version-min=%s', $deployment);
    
  $ENV{IPHONEOS_DEPLOYMENT_TARGET} = $deployment;
  
  push @args, qw(--build=x86_64-apple-darwin12 --host=arm-apple-darwin10)
  }
  
# Configure for iPhone simulator.
elsif($sdk =~ /^iphonesimulator/i)
  {
  @arch = 
    $arch
      ? split(/\s+/, $arch)
      : qw(i386 x86_64);

  $minversion = sprintf('-mios-simulator-version-min=%s', $deployment);

  $ENV{IPHONEOS_DEPLOYMENT_TARGET} = $deployment;
  }
  
# Configure for MacOS X.
elsif($sdk =~ /^macosx/i)
  {
  my ($version) = $sdk =~ /^macosx(.+)$/i;
  
  @arch = 
    $arch
      ? split(/\s+/, $arch)
      : qw(i386 x86_64);
    
  $minversion = sprintf('-mmacosx-version-min=%s', $deployment);

  $ENV{MACOSX_DEPLOYMENT_TARGET} = $deployment;
  }

# Tack on a horrible path for platform and SDK-specific frameworks.
my @parts = split /\//, $ENV{SDKROOT};
my @dirParts = @parts[4..9];

my $installPath = 
  $prefix ne $defaultPrefix
    ? File::Spec->join($prefix, @dirParts, 'Frameworks')
    : File::Spec->join($prefix, 'Frameworks');

# Setup the isysroot command-line parameters and PATH, if necessary.
$ENV{PATH} = sprintf(
  '%s:%s:/usr/bin:/bin:/usr/sbin:/sbin',
  $ENV{SDKROOT},
  '/Applications/Xcode.app/Contents/Developer/usr/bin')
if $sdk && ($sdk =~ /^iphone/i);
  
my $frameworkDirectory = sprintf('%s.framework', $framework);

my $xargs = 
  {
  framework => $framework,
  source => $dir,
  id => $id,
  sdk => $sdk,
  minversion => $minversion,
  lib => $lib,
  frameworkPath =>     
    File::Spec->join($installPath, $frameworkDirectory)
  };

# Create a full install directory tree.

# Give me one iteration at least.
@arch = qw(x86_64)
  if not @arch;
  
my @archList = map { '-arch ' . $_ } @arch;

# Now hack up the version for non-native builds.
$xargs->{version} = $version;

$ENV{CFLAGS} = "@archList -isysroot $ENV{SDKROOT} $minversion";
$ENV{CXXFLAGS} = "@archList -isysroot $ENV{SDKROOT} $minversion";

# Create the framework bones.
createFramework($xargs);

# Now build the UNIX project.
buildProject($xargs, @args);

# Turn the library into a framework.
convertToFramework($xargs);

# Install the final framework.
installFramework($xargs);
  
# Clean up.
if(!$debug)
  {
  runsystem(qq{/bin/rm -Rf "$tmpdir"});
  }
  
# Create framework bones.
sub createFramework
  {
  my $xargs = shift;

  my $frameworkPath = $xargs->{frameworkPath};

  my $frameworkVersionPath = 
    File::Spec->join($frameworkPath, 'Versions', $xargs->{version});

  mkpath("$frameworkVersionPath/Resources");
  mkpath("$frameworkVersionPath/unix/lib");
  }

# Build a UNIX project in the unix directory of the framework.
sub buildProject
  {
  my $xargs = shift;
  my @args = @_;

  my $frameworkPath = $xargs->{frameworkPath};

  my $frameworkVersionPath =  
    "$frameworkPath/Versions/" . $xargs->{version};

  # Clean up any existing framework.
  runsystem(qq{/bin/rm -Rf "$frameworkVersionPath"});

  # Prepare the work area.
  runsystem(qq{/bin/mkdir -p "$frameworkVersionPath/unix"});

  my $installPrefix = File::Spec->rel2abs("$frameworkVersionPath/unix");

  my $current = getcwd;
  
  # Move into the directory.
  chdir $xargs->{source};

  # I'm probably going to need to hack up the dynamic libraries
  # when I'm done.
  $ENV{LDFLAGS} = "$ENV{LDFLAGS} -headerpad_max_install_names";

  # Check for a project that isn't fully configured.
  if(!-e 'configure' && -e 'configure.ac')
    {
    $ENV{LIBTOOLIZE} = 'libtoolize';
    
    runsystem(qq{libtoolize});

    runsystem(qq{autoreconf --force --install});
    }
    
  # If there is a configure script, pass the args to it.
  if(-e 'configure')
    {
    runsystem(qq{./configure --prefix=$installPrefix @args});

    # And don't use them again.
    @args = ();
    }
    
  # If there is a CMake script, try to build with CMake.
  elsif(-e 'CMakeLists.txt')
    {
    my $cmake = '/Applications/CMake.app/Contents/bin/cmake';
    
    runsystem(qq{$cmake -DCMAKE_INSTALL_PREFIX:PATH=$installPrefix @args});
    
    # Don't use the args again.
    @args = ();
    }

  # Now build the project.
  runsystem("make @args");

  # Add a search path to all executables.
  addSearchPathsInDirectory($xargs->{source}, $installPath);

  # If a target was specified, do only that.
  if($target)
    {
    runsystem("make @args $target")
    }
  else
    {
    # Build and install using the provided arguments. If there was a 
    # configure script, the argument list will be empty.
    runsystem("make @args install");
    }

  chdir $current;
  }

# Turn a library into a framework.
sub convertToFramework
  {
  my $xargs = shift;
  my @args = @_;

  my $frameworkPath = $xargs->{frameworkPath};

  my $frameworkVersionPath = 
    "$frameworkPath/Versions/" . $xargs->{version};

  my $prefix = File::Spec->rel2abs("$frameworkVersionPath/unix");

  # Establish the library file and links to it.

  # First I have to find the library.
  my $library;

  my $libdir = File::Spec->join($prefix, 'lib');
  my $bindir = File::Spec->join($prefix, 'bin');
  
  # Scan through the UNIX output lib directory.
  opendir(DIR, $libdir);

  while (defined(my $file = readdir(DIR)))
    {
    # Skip parent and self directory entries.
    next
      if $file =~ /^\.\.?$/;

    # Delete .la files.
    #unlink "$prefix/lib/$file"
    #  if $file =~ /\.la$/;

    # Skip anything that isn't a dynamic library.
    next
      if $file !~ /\.dylib$/;

    # Skip symbolic links.
    next
      if -l "$libdir/$file";

    # If I am looking for a specific library, don't look any further.
    if($xargs->{lib} && ($file eq $xargs->{lib}))
      {
      $library = "$libdir/$file";
      debug("Found requested library at $library");
      
      last;
      }
      
    # Save the library. I assume there will only be one non-link library.
    if($file =~ /^lib$xargs->{framework}\..+$/i)
      {
      $library = "$libdir/$file";
      debug("Using library at $library");
      }
    }

  closedir(DIR);

  if($library)
    {
    my $path = "$frameworkVersionPath/" . $xargs->{framework};

    my ($relativePath) = $library =~ m|^$frameworkVersionPath/(.+)$|;
    
    symlink $relativePath, $path;
    debug("Linking $path to $relativePath");
    }
    
  my $current = getcwd;
  
  chdir $frameworkVersionPath;
  
  symlink 'unix/include', 'Headers'
    if -d 'unix/include';
  symlink 'unix/bin', 'Programs'
    if -d 'unix/bin';
    
  # Change all ids to rpaths in all dynamic libraries.
  changeIdsInDirectory($frameworkVersionPath, $libdir);
  
  # Change all hard-coded paths to rpath in other dynamic libraries.
  changePathsInDirectory($frameworkVersionPath, $libdir);
  
  # Change all hard-coded paths to rpath in executables. 
  changePathsInDirectory($frameworkVersionPath, $bindir);
  
  # Add a search path to all executables.
  addSearchPathsInDirectory($bindir, '@executable_path/../../../../..');
  
  chdir $current;
  }

# Change the ID in all librarie in a directory to an rpath.
sub changeIdsInDirectory
  {
  my $frameworkVersionPath = shift;
  my $dir = shift;

  # Scan through the UNIX output lib directory.
  opendir(DIR, $dir);

  while (defined(my $file = readdir(DIR)))
    {
    # Skip parent and self directory entries.
    next
      if $file =~ /^\.\.?$/;

    my $path = File::Spec->join($dir, $file);
    
    # Skip symbolic links.
    next
      if -l $path;

    # Now change the paths.
    changeId($frameworkVersionPath, $path)
      if $file =~ /\.dylib$/;
    }

  closedir(DIR);
  }
  
# Change the ID in a file to an rpath.
sub changeId
  {
  my $frameworkVersionPath = shift;
  my $path = shift;
  
  my ($versionPath) = $frameworkVersionPath =~ m|^$installPath/(.+)$|;
  
  my ($relativePath) = $path =~ m|^$frameworkVersionPath/(.+)$|;
    
  my $rpath = 
    File::Spec->join('@rpath', $versionPath, $relativePath);

  # Now change the id of the library to be the new path.
  runsystem(qq{install_name_tool -id "$rpath" "$path"});
  }

# Change all paths in a directory to an rpath.
sub changePathsInDirectory
  {
  my $frameworkVersionPath = shift;
  my $dir = shift;

  # Scan through the UNIX output lib directory.
  opendir(DIR, $dir);

  while (defined(my $file = readdir(DIR)))
    {
    # Skip parent and self directory entries.
    next
      if $file =~ /^\.\.?$/;

    my $path = File::Spec->join($dir, $file);
    
    # Skip symbolic links.
    next
      if -l $path;

    # Skip static library files.
    next
      if $file =~ /\.la$/;

    # Process dynamic libraries.
    my $process = 0;
    
    $process = 1
      if $file =~ /\.dylib$/;

    # Process executables.
    $process = 1
      if -f $path and -x $path;
      
    # Now change the paths.
    changePaths($frameworkVersionPath, $path)
      if $process;
    }

  closedir(DIR);
  }
  
# Change all paths in a file to an rpath.
sub changePaths
  {
  my $frameworkVersionPath = shift;
  my $path = shift;
  
  my @lines = `otool -L "$path"`;
   
  shift @lines;
  
  foreach my $line (@lines)
    {
    chomp $line;
    
    my ($dylib) = $line =~ /^\s(.+)\s+\(.+\)$/;
    
    if($dylib =~ m|^$installPath/(.+)|)
      {
      my $rdylib = '@rpath/' . $1;
      
      # Now change the id of the library to be the new path.
      runsystem(qq{install_name_tool -change "$dylib" "$rdylib" "$path"});
      }
    }
  }

# Add a search path to all executables.
sub addSearchPathsInDirectory
  {
  my $dir = shift;
  my $rpath = shift;

  my @files = `find $dir -type f -perm +111 -print`;
  
  foreach my $file (@files)
    {
    chomp $file;
    
    my $path = File::Spec->rel2abs($file);
    
    # Skip symbolic links.
    next
      if -l $path;

    # Skip static library files.
    next
      if $file =~ /\.la$/;

    # Skip dynamic library files.
    next
      if $file =~ /\.dylib$/;

    # I may have needed to hack up the rpath at link time.
    runsystem(qq{install_name_tool -delete_rpath "$installPath" "$path"});
    
    runsystem(qq{install_name_tool -add_rpath "$rpath" "$path"});
    }
  }

# Install the framework
sub installFramework
  {
  my $xargs = shift;
  my @args = @_;

  my $frameworkPath = $xargs->{frameworkPath};

  # Create or update the Current links.
  setCurrentLink($frameworkPath);

  my $frameworkVersionPath = 
    "$frameworkPath/Versions/" . $xargs->{version};
  
  # Create framework resources.
  createResources(
    $xargs->{framework}, 
    $frameworkVersionPath, 
    $xargs->{version}, 
    $xargs->{id});  
  }
  
# Setup the Current links.
sub setCurrentLink
  {
  my $frameworkPath = shift;
  
  my $frameworkVersionsPath = "$frameworkPath/Versions";

  # Should I update the current link?
  opendir(DIR, $frameworkVersionsPath);

  my $latestVersion;
  
  while (defined(my $existingVersion = readdir(DIR)))
    {
    debug("Current latest version: $latestVersion");
    debug("Found existing version: $existingVersion");
    # Skip parent and self directory entries.
    next
      if $existingVersion =~ /^Current|\.\.?$/;

    $latestVersion = maxVersion($existingVersion, $latestVersion);
    debug("Set latest version: $latestVersion");
    }

  closedir(DIR);

  die "Couldn't find latest version\n"
    if not defined($latestVersion) or (length($latestVersion) < 1);
    
  my $frameworkVersionPath = "$frameworkVersionsPath/$latestVersion";
  
  mkpath("$frameworkVersionPath/Resources");
  
  my $current = getcwd;
  
  chdir "$frameworkPath/Versions";
  
  unlink 'Current';
  symlink "$latestVersion", 'Current';
  
  chdir $frameworkPath;

  unlink $framework;
  symlink "Versions/Current/$framework", $framework
    if -f "Versions/Current/$framework";
  
  symlink 'Versions/Current/Resources', 'Resources'
    if not -d 'Resources';
  symlink 'Versions/Current/Headers', 'Headers'
    if not -d 'Headers' and -d 'Versions/Current/Headers';
  symlink 'Versions/Current/Programs', 'Programs'
    if not -d 'Programs' and -d 'Versions/Current/Programs';
      
  chdir $current;
  }

# Find the maximum of two version number strings.
sub maxVersion
  {
  my $value1 = shift;
  my $value2 = shift;

  my @value1 = $value1 =~ /(\d+)/g;
  my @value2 = $value2 =~ /(\d+)/g;

  my $index = 0;

  my @max = @value1;

  while(1)
    {
    last
      if not defined $value1[$index];
    
    last
      if not defined $value2[$index];

    if($value1[$index] > $value2[$index])
      {
      @max = @value1;
    
      last;
      }
    elsif($value2[$index] > $value1[$index])
      {
      @max = @value2;
    
      last;
      }
    else
      {
      ++$index;
    
      next;
      }
    }
  
  my $max = join('.', @max);

  return $max;
  }
  
# Create framework resources.
sub createResources
  {
  my $frameworkName = shift;
  my $frameworkVersionPath = shift;
  my $version = shift;
  my $id = shift;

  # Almost done - create the Info.plist file.

  open(OUT, ">$frameworkVersionPath/Resources/Info.plist");

  print OUT getPlist($frameworkName, $version, $id);

  close(OUT);

  # Finally, look for a license file.
  my $license;

  # Scan through the source directory.
  opendir(DIR, "$dir");

  while(defined(my $file = readdir(DIR)))
    {
    # Skip parent and self directory entries.
    next
      if $file =~ /^\.\.?$/;

    # Get the GNU-stye COPYING file.
    $license = $file
      if $file =~ /^COPYING$/;

    $license = $file
      if $file =~ /license/i;

    last
      if $license;
    }

  closedir(DIR);

  copy
    "$dir/$license", "$frameworkVersionPath/Resources/License.txt"
    if $license;
  }

# Construct and return a plist file.
sub getPlist
  {
  my $frameworkName = shift;
  my $version = shift;
  my $id = shift;

  my $plist = << "EOF";
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>English</string>
  <key>CFBundleExecutable</key>
  <string>$frameworkName</string>
  <key>CFBundleGetInfoString</key>
  <string>$framework $version</string>
  <key>CFBundleIdentifier</key>
  <string>$id</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>$frameworkName</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>$version</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>$frameworkName $version</string>
</dict>
</plist>
EOF

  return $plist;
  }

sub mkpath
  {
  my $dir = shift;

  runsystem(qq{/bin/mkdir -p "$dir"});
  }

sub debug
  {
  my @args = @_;
  
  print("DEBUG: @args\n")
    if $debug;
  }
  
sub runsystem
  {
  debug(@_);
    
  system(@_);
  }
  
# Print usage messages.
sub usage
  {
  my $message = << "EOF";
Usage: lib2framework <framework> <id> <version> <source> [options]

  where:
    <framework> is the framework name
    <id> is the framework bundle ID
    <version> is the framework version
    <source> is a souce tarball, zip file, or directory    

  where [options] can be:
    --prefix=/path/to/install/location
    --sdk=<SDK in xcrun nomenclature. e.g. macosx, iphonesimulator6.1, etc.>
    --deploy=<minimum OS version>
    --lib=<primary library name>
    --target=<makefile target>
    --arch=<build architecture(s)>
    --debug For debugging statements
    
  Remaining arguments are passed to configure script.
EOF

  return $message;
  }
  
